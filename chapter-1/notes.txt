[LEGAL IDENTIFIERS]
#Legal identifiers follow the same rules for anything we can name; variables and/or fields, classes and methods.
- Begin with $ (dolar sign), _ (underscores) and alpha (Unicode) characters
- It might have numeric characters, except at beginning (legal identifiers cannot start with numbers)
- Obviously, no reserved keywork can be used for identifiers.

[RESERVED KEYWORDS]
  abstract
  assert
  boolean
  break
  byte
  case
  catch
  char
  class
  const (not used on the language but it is reserved for any future intend)
  continue
  default
  do
  double
  else
  enum
  extends
  false
  final
  finally
  float
  for
  goto (not used on the language but it is reserved for any future intend)
  if
  implements
  import
  instanceof
  int
  interface
  long
  native
  new
  null
  package
  private
  protected
  public
  return
  short
  static
  strictfp
  super
  switch
  syncrhonized
  this
  throw
  throws
  transitive
  true
  try
  void
  volatile
  while

[PRIMITIVE TYPES]
  boolean -> true/false
  byte -> 8-bit integral (-128 to 127)
  short -> 16-bit integral (≃ 32+ thousand)
  int -> 32-bit integral (≃ 2+ billions)
  long -> 64-bit integral (≃ 9+ quitillion)
  float -> 32-bit floating point (decimal)
  double -> 64-bit floating point (decimal)
  char -> 16-bit Unicode value (64+ thousand possible representations)

[NUMERIC LITERALS]
- On integral literal declarations, the JDK checks whether the provided literal fits on the variable type, if it doesn't, a compiler error is thrown;
	byte _var1 = -128, _var2 = 127; // any number out of this range, a compiler error is raised, such as; possible lossy conversion from int to byte
	short _var1 = -32768, _var2 = 32767; // any number out of this range, a compiler error is raised, such as; possible lossy conversion from int to short
	int _var1 = -2147483648, _var2 = 2147483647; // any number out of this range, a compiler error is raised, such as; integer number too large

- On declaring numeric integral literals, it is by default;
	int datatype value
	base 10

- In order to declare numeric integral literal value greater than int, i.e; long
	for long values, the number has to be suffixed with the letter L, e.g; long l = 2147483648L

- It is possible to declare numeric literals on specific base;
	base two/binary, the number has to be preceeded by 0B..., e.g; byte a = -0B10000000, b = 0B1111111;
	base eight/octet, the number has to be preceeded by 0..., e.g; byte a = -0200, b = 0177;
	base ten/decimal, that's the default, e.g; byte a = -128, b = 127;
	base sixteen/hexadecimal, the number has to be preceeded by 0X..., e.g; byte a = -0X80, b = 0X7F;

[DEFAULT INITIALIZATION]
#For instance and class/static fields (non local variables)
  boolean -> false
  byte,short,int,long -> 0 (in the type's bit-length)
  float,double -> 0.0 (in the type's bit-length)
  char -> '\u0000' (NUL)
  reference types -> null

[VARIABLE SCOPE]
* Local variables; in scope from declaration to end of block (method, while, if, for, etc.)
* Instance variables; in scope from declaration until object garbage collected
* Class variables - in scope from declaration until program ends

[METHOD finalize]
	This method can be overridden (it is defined on the class Object) and it aims to be invoked by the JVM when it determines the current instance is no more accessible from any alive thread.
	This method is defined on class Object with the "protected" access modifier, so, it can be defined with this or a greater access modifier, such as "public", but no less restrictive access modifier can be set, such as, default or private.
	Some important details about this method are;
	* There's no how imposes to JVM to run garbage collection, so, there's no how determine the moment the JVM will invoke this method
	* The JVM might never invoke this method, if it understand there's no need to reclaim resource
	* If any exception is raised while JVM is running this method, even the JVM reclaims the resource later, this method will not be invoked again, so summing up, this method can be invoked zero or once.

[JAVA BENEFITS]
- Object Oriented; Java is an object-oriented language, which means all code is defined in classes and most of those classes can be instantiated into objects.
- Encapsulation; Java supports access modifiers to protect data from unintended access and modification.
- Platform Independent; Java is and interpreted language because it gets compiled to bytecode. Once there's a JVM for almost any platform, so from any of those platform the same bytecode can be interpreted and executed, without carying about to compile the same source code to every platform. It is called "write once, run anywhere".
- Robust; One of the major advantages of Java over other languages, is that it prevents memory leaks, since Java manages memory on its own and does garbage collection automatically in a consistent and good way.
- Simple; Java was intended to be simple, it has eliminated pointers, and got rid of operator overloading.
- Secure; Java code runs inside the JVM, which creates a sandbox that makes it hard for Java code do evil things to the hosting computer.
